package com.done.model;

import java.util.ArrayList;
import java.util.List;

/**
 * Nsort generated by MyEclipse Persistence Tools
 */

public class Nsort implements java.io.Serializable {

    // Fields

    private Integer nsortId;

    private String nsortName;

    private Integer sortId;
    //父节点
    private Integer parentNsortId;

    private Integer seq;
    //子节点
    private List<Nsort> subSort;

    // Constructors

    /** default constructor */
    public Nsort() {
    }

    /** minimal constructor */
    public Nsort(Integer nsortId) {
        this.nsortId = nsortId;
    }

    /** full constructor */
    public Nsort(Integer nsortId, String nsortName, Integer sortId) {
        this.nsortId = nsortId;
        this.nsortName = nsortName;
        this.sortId = sortId;
    }

    // Property accessors

    public Integer getNsortId() {
        return this.nsortId;
    }

    public void setNsortId(Integer nsortId) {
        this.nsortId = nsortId;
    }

    public String getNsortName() {
        return this.nsortName;
    }

    public void setNsortName(String nsortName) {
        this.nsortName = nsortName;
    }

    public Integer getSortId() {
        return this.sortId;
    }

    public void setSortId(Integer sortId) {
        this.sortId = sortId;
    }

    public Integer getParentNsortId() {
        return parentNsortId;
    }

    public void setParentNsortId(Integer parentNsortId) {
        this.parentNsortId = parentNsortId;
    }

    public List<Nsort> getSubSort() {
        return subSort;
    }

    public void setSubSort(List<Nsort> subSort) {
        this.subSort = subSort;
    }

    public void addSubSort(Nsort nsort) {
        if (subSort == null) {
            subSort = new ArrayList<Nsort>();
        }
        subSort.add(nsort);
    }

    public void addSubSort(List<Nsort> nsorts) {
        if (subSort == null) {
            subSort = new ArrayList<Nsort>();
        }
        for (Nsort n : nsorts) {
            if (this.getNsortId().equals(n.getParentNsortId())) {
                subSort.add(n);
            }
        }

    }

    public Integer getSeq() {
        return seq;
    }

    public void setSeq(Integer seq) {
        this.seq = seq;
    }

}